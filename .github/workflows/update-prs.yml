name: üîÑ Sync Base Branch into PRs

on:
  push:
    branches:
      - develop

env:
  MAIL: ${{ secrets.MAIL }}
  TOKEN: ${{ secrets.TOKEN }}

jobs:
  generate-matrix:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üìã List PRs and build matrix
        id: set-matrix
        env:
          GITHUB_TOKEN: ${{ env.TOKEN }}
        run: |
          # List open PRs with their numbers, head branch names, and authors
          prs=$(gh pr list --state open --json number,headRefName,author)
          echo "Found PRs: $prs"
          # Filter out PRs from Renovate by excluding branches starting with 'renovate/' or authored by 'renovate[bot]'
          matrix=$(echo "$prs" | jq -c '{"include": [ .[] | select(.headRefName | test("^renovate/") | not) | select(.author.login != "renovate[bot]") | {pr_number: .number, head_branch: .headRefName} ]}')
          echo "Filtered Matrix: $matrix"
          # Set the matrix output
          echo "matrix=$matrix" >> $GITHUB_OUTPUT

  update-prs:
    needs: generate-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.generate-matrix.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: üîß Setup Git
        env:
          GITHUB_MAIL: ${{ env.MAIL }}
        run: |
          git config --global user.name "alvarobernal2412"
          git config --global user.email "$GITHUB_MAIL"

      - name: üåê Fetch all branches
        run: git fetch --all

      - name: üîÄ Merge develop into PR branch
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Processing PR #${{ matrix.pr_number }} on branch '${{ matrix.head_branch }}'"
          git checkout "${{ matrix.head_branch }}"
          # Attempt to merge develop into the PR branch
          if git merge origin/develop --no-commit --no-ff; then
            # Commit and push if merge applies cleanly
            git commit -m "Merge branch 'develop' into ${{ matrix.head_branch }}"
            git push origin "${{ matrix.head_branch }}"
            echo "Branch '${{ matrix.head_branch }}' updated successfully."
          else
            # Check if the error is due to unrelated histories
            if git merge-base --is-ancestor origin/develop "${{ matrix.head_branch }}"; then
              echo "Merge conflict detected in branch '${{ matrix.head_branch }}', skipping update."
              git merge --abort
            else
              echo "Unrelated histories detected between 'develop' and '${{ matrix.head_branch }}', skipping merge."
              git reset --merge
            fi
          fi
